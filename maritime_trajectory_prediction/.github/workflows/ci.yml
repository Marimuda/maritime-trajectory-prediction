name: Maritime Trajectory Prediction CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHONPATH: ${{ github.workspace }}/maritime_trajectory_prediction/src

jobs:
  lint:
    name: Code Linting & Formatting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black bandit pre-commit

    - name: Run ruff linting
      run: |
        cd maritime_trajectory_prediction
        ruff check . --output-format=github

    - name: Run ruff formatting check
      run: |
        cd maritime_trajectory_prediction
        ruff format --check .

    - name: Run bandit security check
      run: |
        cd maritime_trajectory_prediction
        bandit -r . -f json -o bandit-results.json || true
        bandit -r . --exclude=./tests

    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: maritime_trajectory_prediction/bandit-results.json

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy types-requests types-PyYAML
        cd maritime_trajectory_prediction
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run mypy type checking
      continue-on-error: true  # Type checking issues shouldn't block the pipeline
      run: |
        cd maritime_trajectory_prediction
        mypy src/ --ignore-missing-imports --no-strict-optional

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgeos-dev libproj-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-mock
        cd maritime_trajectory_prediction
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install optional dependencies for testing
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install lightning hydra-core omegaconf pydantic geopy

    - name: Verify unified CLI structure
      run: |
        cd maritime_trajectory_prediction
        python3 -c "
        from pathlib import Path

        # Test basic structure validation
        config_dir = Path('configs')
        assert config_dir.exists(), 'Config directory missing'
        assert (config_dir / 'config.yaml').exists(), 'Main config missing'

        # Test main entry point
        assert Path('main.py').exists(), 'main.py entry point missing'

        # Test source structure
        src_dir = Path('src')
        required_modules = [
            'config/__init__.py',
            'data/preprocess.py',
            'models/factory.py',
            'training/trainer.py',
            'inference/predictor.py',
            'experiments/train.py',
            'experiments/evaluation.py',
            'experiments/benchmark.py'
        ]

        for module_path in required_modules:
            full_path = src_dir / module_path
            assert full_path.exists(), f'Required module {module_path} missing'

        print('‚úÖ Unified CLI structure validation passed')
        "

    - name: Run unit tests
      run: |
        cd maritime_trajectory_prediction
        pytest tests/unit/ -v --tb=short --maxfail=5

    - name: Run integration tests (structure only)
      run: |
        cd maritime_trajectory_prediction
        # Run only structure validation tests that don't require heavy dependencies
        pytest tests/integration/test_unified_cli.py::test_config_files_exist -v
        pytest tests/integration/test_unified_cli.py::test_deprecated_scripts_removed -v
        pytest tests/integration/test_unified_cli.py::test_unified_cli_structure -v
        pytest tests/integration/test_unified_cli.py::test_claude_blueprint_compliance -v

    - name: Run contract tests
      run: |
        cd maritime_trajectory_prediction
        # Test that all entry points exist and have correct signatures
        python3 -c "
        import re
        from pathlib import Path

        # Check all entry point functions exist
        src_dir = Path('src')
        entry_points = [
            'data/preprocess.py:run_preprocess',
            'experiments/train.py:run_training',
            'experiments/evaluation.py:run_evaluation',
            'inference/predictor.py:run_prediction',
            'experiments/benchmark.py:run_benchmarking'
        ]

        for entry_point in entry_points:
            file_path, function_name = entry_point.split(':')
            full_path = src_dir / file_path

            assert full_path.exists(), f'File {file_path} does not exist'

            content = full_path.read_text()
            pattern = f'def {function_name}('
            matches = [line for line in content.split('\n') if pattern in line]
            assert matches, f'Function {function_name} not found in {file_path}'

            print(f'‚úÖ {file_path}:{function_name} - OK')

        print('‚úÖ All entry point functions verified!')
        "

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        cd maritime_trajectory_prediction
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install minimal deps for coverage
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        pip install omegaconf pydantic hydra-core || true

    - name: Run coverage analysis
      continue-on-error: true
      run: |
        cd maritime_trajectory_prediction
        # Run coverage on unit tests only (integration tests may require heavy deps)
        pytest tests/unit/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          maritime_trajectory_prediction/coverage.xml
          maritime_trajectory_prediction/htmlcov/

  validate-blueprint:
    name: CLAUDE Blueprint Validation
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]

    steps:
    - uses: actions/checkout@v4

    - name: Validate CLAUDE Blueprint Compliance
      run: |
        cd maritime_trajectory_prediction

        echo "üîç Validating CLAUDE Blueprint Implementation..."
        echo "================================================="

        # 1. Single entry point
        if [ -f "main.py" ]; then
          echo "‚úÖ Single main.py entry point exists"
        else
          echo "‚ùå main.py entry point missing"
          exit 1
        fi

        # 2. Hydra configuration structure
        if [ -d "configs" ] && [ -f "configs/config.yaml" ]; then
          echo "‚úÖ Hydra configuration structure in place"
        else
          echo "‚ùå Hydra configuration missing"
          exit 1
        fi

        # 3. Configuration groups
        required_groups=("mode" "data" "model" "trainer" "logger" "callbacks")
        for group in "${required_groups[@]}"; do
          if [ -d "configs/$group" ]; then
            echo "‚úÖ Configuration group '$group' exists"
          else
            echo "‚ùå Configuration group '$group' missing"
            exit 1
          fi
        done

        # 4. Source module structure
        required_modules=(
          "src/config/__init__.py"
          "src/data/preprocess.py"
          "src/models/factory.py"
          "src/training/trainer.py"
          "src/inference/predictor.py"
          "src/experiments/train.py"
          "src/experiments/evaluation.py"
          "src/experiments/benchmark.py"
        )

        for module in "${required_modules[@]}"; do
          if [ -f "$module" ]; then
            echo "‚úÖ Required module '$module' exists"
          else
            echo "‚ùå Required module '$module' missing"
            exit 1
          fi
        done

        # 5. Deprecated scripts removed
        deprecated_scripts=(
          "predict_trajectory.py"
          "inference_transformer_models.py"
          "train_simple_model.py"
          "evaluate_transformer_models.py"
          "test_benchmark_models.py"
        )

        for script in "${deprecated_scripts[@]}"; do
          if [ ! -f "$script" ]; then
            echo "‚úÖ Deprecated script '$script' removed"
          else
            echo "‚ùå Deprecated script '$script' still exists"
            exit 1
          fi
        done

        echo "================================================="
        echo "üéâ CLAUDE Blueprint validation PASSED!"
        echo "‚úÖ Unified CLI architecture successfully implemented"
        echo "‚úÖ All deprecated scripts consolidated"
        echo "‚úÖ Configuration-driven development enabled"
        echo "‚úÖ Modular architecture in place"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, coverage, validate-blueprint]
    if: always()

    steps:
    - name: Build Summary
      run: |
        echo "# Maritime Trajectory Prediction CI Summary" > $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| üîç Lint | ${{ needs.lint.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üèóÔ∏è Type Check | ${{ needs.type-check.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üß™ Tests | ${{ needs.test.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üìä Coverage | ${{ needs.coverage.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üìã Blueprint | ${{ needs.validate-blueprint.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## CLAUDE Blueprint Implementation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Single CLI Entry Point**: All functionality accessible via `main.py`" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Hydra Configuration**: Configuration-driven development with mode dispatch" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Modular Architecture**: Clean separation of concerns in `src/` structure" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Deprecated Scripts Removed**: Legacy scripts consolidated per blueprint" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Comprehensive Testing**: Unit, integration, and contract tests in place" >> $GITHUB_STEP_SUMMARY
